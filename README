initial commit


為了確保所有筆記、圖片與章節結構都能成功同步到 GitHub，請依照以下步驟進行版本控制操作：

### ✅ 修改筆記後的標準 Git 操作（在 VS Code 中進行）

1. **儲存所有變更後，打開 VS Code 左側的 Source Control 面板**
   點選左側工具列中「🔁」圖示，或快捷鍵：

   ```
   Ctrl + Shift + G
   ```

2. **檢查變更檔案**
   修改過的檔案會出現在變更區（Changes），可逐一點開確認內容。

3. **撰寫 Commit Message**
   在上方輸入框寫下這次修改說明，例如：

   ```
   新增 Stack 筆記與圖片
   ```

4. **按下 `✓` 進行 Commit**
   提交變更到本地 Git。

5. **將修改 Push 到 GitHub**
   點選左下角出現的上傳箭頭 `⬆ Push`，或執行以下指令：

   ```bash
   git push origin main
   ```

---

### 🧪 補充（終端機操作法）

若你習慣用終端機，也可輸入以下三行：

```bash
git add .
git commit -m "更新 CH4-Linked List 筆記"
git push origin main
```

---

### 🧾 注意事項

* 未執行 **commit + push**，筆記只存在本機，不會同步上 GitHub。
* 每次重大修改（新增筆記、重構目錄、加圖片）都應寫一則清楚的 commit message。
* 圖片應放入對應章節的 `/images/` 資料夾，路徑使用相對路徑。

很好的問題。**Git 的 commit message（提交說明）雖然沒有「硬性格式」，但有一套推薦的好習慣格式**，可以幫助你未來查找變更、版本回溯、多人協作都更清楚。

---

## ✅ 最常用的寫法格式（推薦用於個人與協作專案）

### 格式：

```text
<動詞（原形）> <做了什麼內容>
```

### 範例：

| 類型     | 範例 commit message                 |
| ------ | --------------------------------- |
| 新增內容   | `Add CH4-Linked List 筆記與圖片`       |
| 新增多個檔案 | `Add CH3~CH5 筆記資料夾與初始 README.md`  |
| 修改筆記內容 | `Update Stack.md 新增中序範例與圖示`       |
| 修正錯誤   | `Fix 錯字與程式碼區塊標示問題`                |
| 刪除檔案   | `Remove 重複圖片與多餘筆記檔案`              |
| 重新命名檔案 | `Rename AVL_Tree.md → AVL_BST.md` |
| 移動檔案   | `Move 排程演算法圖片至 CH9/images 資料夾`    |

---

## ✅ 可選的進階格式（如果你想更條理分明）

```text
<類別>: <說明>

例如：
docs: 更新 README 筆記說明區
feat: 新增 Queue 與 Deque 筆記
refactor: 重新整理 AVL Tree 圖文結構
```

| 類別         | 意義                    |
| ---------- | --------------------- |
| `feat`     | 新功能、新筆記               |
| `fix`      | 錯誤修正                  |
| `docs`     | 文件、說明、註解相關修改          |
| `refactor` | 重構、結構優化               |
| `style`    | 格式調整（不影響內容）           |
| `chore`    | 雜項（新增 `.gitignore` 等） |

---

## ✅ 結論

你**可以自由寫 commit message**，但建議採用上述**動詞開頭簡潔格式**：

* ✅ 好查找
* ✅ 結構清晰
* ✅ 適合你未來複習、篩選內容

---

### 🎯 範例（符合你目前的使用情境）

```
Add CH5-Tree_資料結構 初始筆記與目錄
Update README.md 加入 Git 操作流程說明
Fix Markdown 錯誤連結
Move swapping.md 至 CH7_Memory_作業系統/
```

是否需要我幫你建立 commit message 樣板（可貼在 README 中當範例）？
你目前畫面中確實沒有任何檔案顯示在 `CHANGES` 區塊下方，這表示：

> 你**沒有實際修改任何檔案**，或者你修改了但還沒儲存。

這也是為什麼你無法「Stage（暫存）」的原因：沒有變更內容可提交。

---

## ✅ 解決方法：請先做出實際修改並儲存

### 🔧 示範流程：

1. 在 `README.md` 裡新增一行，例如：

   ```markdown
   > 本筆記由 Visual Studio Code 編輯與同步
   ```

2. **按 `Ctrl + S` 儲存**

3. 然後再點開左側 Source Control（🔁）圖示

這時你會看到：

```
CHANGES
README.md
```

並在 `README.md` 右側出現一個 `+` 按鈕，表示你可以「**Stage this file**」。

---

## ✅ 如何 Stage（暫存）檔案：
✅ 【1】你確定真的「儲存」了檔案嗎？
修改完檔案後，請 一定要按 Ctrl + S 儲存。

若還沒儲存，Git 和 VS Code 不會偵測成變更
### 方法一：滑鼠操作

* 在 `README.md` 檔案上方或右側出現 `+` 按鈕，點一下即可 **Stage**
* 檔案會從 `CHANGES` 移動到 `STAGED CHANGES`

### 方法二：右鍵選單

* 在 `README.md` 上點右鍵 → 選擇 `Stage Changes`

---

## ✅ Stage 成功後

你就會看到 `✓ Commit` 變成 **可按**，然後就可以正常提交與 push：

1. 撰寫 commit message
2. 點 `✓ Commit`
3. 最後執行 push（左下角會出現 push 按鈕，或手動打指令）

你目前畫面中確實沒有任何檔案顯示在 `CHANGES` 區塊下方，這表示：

> 你**沒有實際修改任何檔案**，或者你修改了但還沒儲存。

這也是為什麼你無法「Stage（暫存）」的原因：沒有變更內容可提交。

---

## ✅ 解決方法：請先做出實際修改並儲存

### 🔧 示範流程：

1. 在 `README.md` 裡新增一行，例如：

   ```markdown
   > 本筆記由 Visual Studio Code 編輯與同步
   ```

2. **按 `Ctrl + S` 儲存**

3. 然後再點開左側 Source Control（🔁）圖示

這時你會看到：

```
CHANGES
README.md
```

並在 `README.md` 右側出現一個 `+` 按鈕，表示你可以「**Stage this file**」。

---

## ✅ 如何 Stage（暫存）檔案：

### 方法一：滑鼠操作

* 在 `README.md` 檔案上方或右側出現 `+` 按鈕，點一下即可 **Stage**
* 檔案會從 `CHANGES` 移動到 `STAGED CHANGES`

### 方法二：右鍵選單

* 在 `README.md` 上點右鍵 → 選擇 `Stage Changes`

---

## ✅ Stage 成功後

你就會看到 `✓ Commit` 變成 **可按**，然後就可以正常提交與 push：

1. 撰寫 commit message
2. 點 `✓ Commit`
3. 最後執行 push（左下角會出現 push 按鈕，或手動打指令）

---

### 如果你需要我幫你把這整段「怎麼觸發 CHANGES → Stage → Commit → Push」的圖文教學整理成 `.md` 文件放入專案，方便未來查閱，我可以幫你馬上建立。是否需要？
